/* Copyright (c) 2023, LegoSoft Soluciones, S.C.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are not permitted.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 *  Neo4jConfiguration.java
 *
 *  Developed 2023 by LegoSoftSoluciones, S.C. www.legosoft.com.mx
 */
package com.acme.orderservice.gql.config;

import com.acme.orderservice.config.ServiceConfig;
import com.ailegorreta.commons.utils.HasLogger;
import graphql.schema.GraphQLList;
import graphql.schema.GraphQLNonNull;
import graphql.schema.GraphQLType;
import org.neo4j.driver.Driver;
import org.neo4j.driver.Result;
import org.neo4j.driver.SessionConfig;
import org.neo4j.graphql.Cypher;
import org.neo4j.graphql.DataFetchingInterceptor;
import org.slf4j.Logger;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import jakarta.validation.constraints.NotNull;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.*;
import java.util.stream.Collectors;

/**
 * Configuration of the DataFetchingInterceptor
 *
 *  From the example: https://github.com/neo4j-graphql/neo4j-graphql-java/tree/master/examples/graphql-spring-boot
 *  we register the Neo4j graphql schema.
 *
 * @project: order-service
 * @author rlh
 * @date November 2023
 */
@Configuration
public class Neo4jConfiguration implements HasLogger {

    /**
     * This interceptor is bound to all the graphql fields generated by the neo4j-graphql-library.
     * Its purpose is the execution of the cypher query and the transformation of the query result.
     */
    @Bean
    public DataFetchingInterceptor dataFetchingInterceptor(Driver driver,
                                                           ServiceConfig serviceConfig) {
        return (env, delegate) -> {
            Cypher cypher = delegate.get(env);

            return driver.session(SessionConfig.forDatabase(serviceConfig.getDatabase())).writeTransaction(tx -> {
                Map<String, Object> boltParams = new HashMap<>(cypher.getParams());

                boltParams.replaceAll((key, value) -> toBoltValue(value));
                var query = cypher.getQuery();

                /*
                 * I think it is better to use MERGE instead of CREATE to avoid create duplicate node.
                 * So we use this patch since thee is no @cypher directive in GraphQL-java that makes is
                 */
                if (query.startsWith("CREATE")) query = "MERGE" + query.substring(6);
                getLogger().debug("Generated CYPHER:" + query);

                Result result = tx.run(query, boltParams);

                try {
                    if (isListType(cypher.getType()))
                        return result.list()
                                .stream()
                                .map(record -> record.get(cypher.getVariable()).asObject())
                                .collect(Collectors.toList());
                    else
                        return result.list()
                                .stream()
                                .map(record -> record.get(cypher.getVariable()).asObject())
                                .collect(Collectors.toList())
                                .stream().findFirst()
                                .orElse(Collections.emptyMap());
                } catch (Exception e) {
                    getLogger().error("Error fatal al accesar a Neo4j:" + e.getMessage());     // This is to send the log to Sleuth
                    throw(e);
                }
            });
        };
    }

    private Object toBoltValue(Object value) {
        if (value instanceof BigInteger)
            return ((BigInteger) value).longValueExact();
        if (value instanceof BigDecimal)
            return ((BigDecimal) value).doubleValue();

        return value;
    }

    private boolean isListType(GraphQLType type) {
        if (type instanceof GraphQLList)
            return true;

        return type instanceof GraphQLNonNull && this.isListType(((GraphQLNonNull) type).getWrappedType());
    }

    @NotNull
    @Override
    public Logger getLogger() { return HasLogger.DefaultImpls.getLogger(this); }
}
